{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\gpgab\\\\Desktop\\\\next-project\\\\pages\\\\index.js\";\nimport Head from 'next/head';\nimport { MongoClient } from 'mongodb';\nimport MeetupList from '../components/meetups/MeetupList';\nimport { Fragment } from 'react';\n\nfunction Home(props) {\n  return;\n\n  /*#__PURE__*/\n  _jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupList, {\n      meetups: props.meetups\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 3\n  }, this);\n}\n\nexport async function getStaticProps() {\n  const client = await MongoClient.connect('mongodb+srv://gpgabika:Apqe0B1tezbGHfj1@cluster0.0n2z00u.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find().toArray();\n  client.close();\n  return {\n    props: {\n      meetups: meetups.map(meetup => ({\n        title: meetup.title,\n        address: meetup.address,\n        image: meetup.image,\n        id: meetup._id.toString()\n      }))\n    },\n    revalidate: 1\n  };\n}\nexport default Home;","map":{"version":3,"sources":["C:/Users/gpgab/Desktop/next-project/pages/index.js"],"names":["Head","MongoClient","MeetupList","Fragment","Home","props","meetups","getStaticProps","client","connect","db","meetupsCollection","collection","find","toArray","close","map","meetup","title","address","image","id","_id","toString","revalidate"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,SAASC,WAAT,QAA4B,SAA5B;AAEA,OAAOC,UAAP,MAAuB,kCAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACnB;;AACA;AAAA,UAAC,QAAD;AAAA,4BAEI,QAAC,IAAD;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFJ,eAKI,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAOD;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACnC,QAAMC,MAAM,GAAG,MAAMP,WAAW,CAACQ,OAAZ,CAAoB,0GAApB,CAArB;AACK,QAAMC,EAAE,GAAEF,MAAM,CAACE,EAAP,EAAV;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMN,OAAO,GAAG,MAAOK,iBAAiB,CAACE,IAAlB,GAAyBC,OAAzB,EAAvB;AACAN,EAAAA,MAAM,CAACO,KAAP;AAEP,SAAO;AACLV,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAEA,OAAO,CAACU,GAAR,CAAYC,MAAM,KAAG;AAC5BC,QAAAA,KAAK,EAACD,MAAM,CAACC,KADe;AAE5BC,QAAAA,OAAO,EAACF,MAAM,CAACE,OAFa;AAG5BC,QAAAA,KAAK,EAACH,MAAM,CAACG,KAHe;AAI5BC,QAAAA,EAAE,EAACJ,MAAM,CAACK,GAAP,CAAWC,QAAX;AAJyB,OAAH,CAAlB;AADJ,KADF;AASLC,IAAAA,UAAU,EAAE;AATP,GAAP;AAWD;AAED,eAAepB,IAAf","sourcesContent":["import Head from 'next/head'\r\nimport { MongoClient } from 'mongodb'\r\n\r\nimport MeetupList from '../components/meetups/MeetupList'\r\nimport { Fragment } from 'react'\r\n\r\nfunction Home(props) {\r\n  return \r\n  <Fragment>\r\n\r\n      <Head>\r\n        <title></title>\r\n      </Head>\r\n      <MeetupList meetups={props.meetups} />\r\n  </Fragment>\r\n}\r\n\r\nexport async function getStaticProps() {\r\n    const client = await MongoClient.connect('mongodb+srv://gpgabika:Apqe0B1tezbGHfj1@cluster0.0n2z00u.mongodb.net/meetups?retryWrites=true&w=majority')\r\n         const db =client.db()\r\n\r\n         const meetupsCollection = db.collection('meetups')\r\n\r\n         const meetups = await  meetupsCollection.find().toArray()\r\n         client.close()\r\n\r\n  return {\r\n    props: {\r\n      meetups: meetups.map(meetup=>({\r\n        title:meetup.title,\r\n        address:meetup.address,\r\n        image:meetup.image,\r\n        id:meetup._id.toString()\r\n      })),\r\n    },\r\n    revalidate: 1,\r\n  }\r\n}\r\n\r\nexport default Home\r\n"]},"metadata":{},"sourceType":"module"}